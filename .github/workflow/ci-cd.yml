name: CI/CD - MicroServicio Node.js en DOCKER desplegado en EC2

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice-lab
  APP_PORT: ${{ secrets.APP_PORT }}

jobs:
  ci:
    name: Integracion Continua (build y test)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app

    steps:
      - name: Obtener el codigo fuente
        uses: actions/checkout@v4

      - name: Configuracion Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Instalar dependencias
        run: npm ci

      - name: Ejecutar pruebas
        run: npm test

      - name: Iniciar sesion en Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Construir imagen
        run: docker build -t ${{ env.IMAGE_NAME }}:latest .

      - name: Publicar imagen en Docker Hub
        run: docker push ${{ env.IMAGE_NAME }}:latest

  cd:
    name: Entrega y Despliegue en EC2
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: Instalar cliente SSH
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Configurar llave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Desplegar contenedor en EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          IMAGE: ${{ env.IMAGE_NAME }}
          PORT: ${{ env.APP_PORT }}
        run: |
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -l "$USER" "$HOST" << 'EOF'
          set -euxo pipefail
          sudo systemctl start docker
          docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}" || true
          docker network inspect appnet >/dev/null 2>&1 || docker network create appnet
          docker ps -q --filter "name=demo-microservice-lab" | grep -q . && docker stop demo-microservice-lab || true
          docker ps -aq --filter "name=demo-microservice-lab" | grep -q . && docker rm -f demo-microservice-lab || true
          docker pull $IMAGE:latest
          docker run -d --name demo-microservice-lab --restart unless-stopped --network appnet -p ${PORT:-3000}:3000 $IMAGE:latest
          EOF