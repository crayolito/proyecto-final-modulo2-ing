name: CI/CD - Microservicio Node.js en DOCKER desplegado en EC2

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice-lab
  APP_PORT: ${{ secrets.APP_PORT || 3000 }}

jobs:
  ci:
    name: Integracion continua (build y test)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app

    steps:
      - name: Obtener codigo
        uses: actions/checkout@v4

      - name: Configuracion Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Instalar dependencias
        run: npm install

      - name: Ejecutar las pruebas
        run: npm test

      - name: Iniciar sesion en Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Construir imagen (latest)
        run: docker build -t $IMAGE_NAME:latest .

      - name: Publicar la imagen (latest)
        run: docker push $IMAGE_NAME:latest

  cd:
    name: Entrega y despliegue en EC2
    runs-on: ubuntu-latest
    needs: [ci]

    steps:
      - name: Instalar cliente SSH
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Cargar clave privada en ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Ver fingerprint de la clave cargada en el agent
        run: |
          set -euo pipefail
          ssh-add -l -E sha256

      - name: Registrar known_hosts
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          ssh-keyscan -T 10 -H "$EC2_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Probar conexión SSH (solo publickey, usando agent)
        env:
          HOST: ${{ secrets.EC2_HOST }}
        run: |
          set -euo pipefail
          ssh -o PreferredAuthentications=publickey \
              -o PubkeyAuthentication=yes \
              ec2-user@"$HOST" 'whoami && uname -a'

      - name: Desplegar contenedor en EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice-lab:latest
          APP_PORT: ${{ env.APP_PORT }}
        run: |
          set -euo pipefail
          ssh -o IdentitiesOnly=no -o StrictHostKeyChecking=yes \
              ec2-user@"$HOST" "IMAGE='$IMAGE' APP_PORT='$APP_PORT' bash -s" << 'EOF'
          set -euxo pipefail

          # Instalar Docker si no existe
          if ! command -v docker >/dev/null 2>&1; then
            if [ -f /etc/os-release ] && grep -qi "amazon linux" /etc/os-release; then
              # Amazon Linux (incluye AL2023)
              sudo dnf update -y || true
              sudo dnf install -y docker || sudo yum install -y docker || true
            else
              # Ubuntu/Debian
              sudo apt-get update -y
              sudo apt-get install -y docker.io
            fi
          fi

          # Iniciar/enable del servicio Docker si aplica
          if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl enable docker || true
            sudo systemctl start docker || true
          else
            sudo service docker start || true
          fi

          # Asegurar grupo docker para ec2-user (no afecta sesión actual)
          sudo usermod -aG docker ec2-user || true

          # Crear red y manejar contenedor usando sudo
          sudo docker network inspect appnet >/dev/null 2>&1 || sudo docker network create appnet
          sudo docker ps -q --filter "name=demo-microservice-lab" | grep -q . && sudo docker stop demo-microservice-lab || true
          sudo docker ps -aq --filter "name=demo-microservice-lab" | grep -q . && sudo docker rm demo-microservice-lab || true

          sudo docker pull "$IMAGE"
          sudo docker run -d --name demo-microservice-lab --restart unless-stopped \
            --network appnet -p 80:"$APP_PORT" "$IMAGE"
          EOF